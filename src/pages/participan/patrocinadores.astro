---
import Layout from '../../layouts/Layout.astro';
import Breadcrumb from '../../components/layout/Breadcrumb.astro';
import Colaborador from '../../components/Colaborador.astro';
import { getEntry } from 'astro:content';

const { data } = await getEntry("patrocinadores", "patrocinadores");
const { patrocinadores } = data;
interface patrocinador {
    nombre: string;
    descripciones: string[];
    logo: string;
    web: string;
    rrss: { [key: string]: string };
    titulo1: string;
    titulo2: string;
    botonMas: string;
    categoria: string;
    colortitulo2: string;
}

const categorias = ["Platino", "Oro", "Plata", "Bronce"];
const patrocinadoresPorCategoria = categorias.map((categoria) => ({
    categoria,
    items: patrocinadores.filter((p: any) => p.categoria === categoria),
}));
---
---
<Layout title="Patrocinadores">

    <Breadcrumb>
        <Fragment slot="title">Patrocinadores</Fragment>
        <Fragment slot="texto">Conoce a los patrocinadores que hacen posible este evento.</Fragment>
    </Breadcrumb>

    <div class="mx-auto p-6 dark:bg-gray-800 w-full">
        {patrocinadoresPorCategoria.map(({ categoria, items }) => (
            <section class="mb-12">
                <h2 class={`text-center text-2xl font-bold mb-12 ${
                    categoria === "Platino" ? "text-blue-500" :
                    categoria === "Oro" ? "text-yellow-500" :
                    categoria === "Plata" ? "text-gray-400" :
                    "text-orange-500"
                }`}>
                    {categoria}
                </h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    {items.map((patrocinador: patrocinador) => (
                        <Colaborador {...patrocinador} />
                    ))}
                </div>
            </section>
        ))}
    </div>

</Layout>

<style>
    .visible {
        opacity: 1 !important;
        transform: translateY(0) !important;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const patrocinadores = document.querySelectorAll('.patrocinadores > div');

        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                        observer.unobserve(entry.target); 
                    }
                });
            },
            { threshold: 0.1 }
        );

        patrocinadores.forEach((element) => observer.observe(element));
    });
</script>
